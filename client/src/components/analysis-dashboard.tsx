import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { getQueryFn } from "@/lib/queryClient";
import QueryInterface from "@/components/query-interface";
import TimelineVisualization from "@/components/timeline-visualization";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { GitBranch, Download, RefreshCw } from "lucide-react";
import type { Repository, ChangeEvent, Query } from "@shared/schema";

interface AnalysisDashboardProps {
  repository: Repository;
}

export default function AnalysisDashboard({ repository }: AnalysisDashboardProps) {
  const { data: changeEvents = [] } = useQuery({
    queryKey: ["/api/repositories", repository.id, "events"],
    queryFn: getQueryFn<ChangeEvent[]>({ on401: "throw" }),
  });

  const { data: recentQueries = [] } = useQuery({
    queryKey: ["/api/repositories", repository.id, "queries"],
    queryFn: getQueryFn<Query[]>({ on401: "throw" }),
  });

  const exportReport = () => {
    const reportData = {
      repository: {
        name: repository.name,
        url: repository.url,
        description: repository.description,
        lastAnalyzed: repository.lastAnalyzedAt,
        commitCount: repository.commitCount,
        contributorCount: repository.contributorCount,
        fileCount: repository.fileCount,
        confidenceScore: repository.confidenceScore,
      },
      summary: {
        totalChangeEvents: changeEvents.length,
        majorFeatures: repository.majorFeatureCount,
        categoriesBreakdown: getCategoryStats(),
      },
      changeEvents: changeEvents.map(event => ({
        title: event.title,
        description: event.description,
        category: event.category,
        rationale: event.rationale,
        businessImpact: event.businessImpact,
        timestamp: event.timestamp,
        commitShas: event.commitShas,
        filesAffected: event.filesAffected,
      })),
      recentQueries: recentQueries.map(query => ({
        question: query.question,
        answer: query.answer,
        confidence: 95, // Default confidence for export
        timestamp: query.createdAt,
      })),
      metadata: {
        exportedAt: new Date().toISOString(),
        exportedBy: 'Codebase Time Machine',
        version: '1.0',
      }
    };

    // Generate comprehensive text report
    const textReport = `
# Codebase Time Machine Analysis Report

## Repository Overview
- **Name:** ${repository.name}
- **URL:** ${repository.url}
- **Description:** ${repository.description || 'No description available'}
- **Analysis Date:** ${repository.lastAnalyzedAt ? new Date(repository.lastAnalyzedAt).toLocaleDateString() : 'Unknown'}

## Statistics
- **Total Commits:** ${repository.commitCount}
- **Contributors:** ${repository.contributorCount}
- **Files Analyzed:** ${repository.fileCount}
- **Confidence Score:** ${repository.confidenceScore}%
- **Change Events Identified:** ${changeEvents.length}
- **Major Features:** ${repository.majorFeatureCount}

## Change Categories Breakdown
${getCategoryStats().map(stat => `- **${stat.name}:** ${stat.count}`).join('\n')}

## Major Change Events

${changeEvents.filter(event => event.category === 'new_feature').slice(0, 10).map((event, index) => `
### ${index + 1}. ${event.title}
- **Category:** ${event.category}
- **Business Impact:** ${event.businessImpact}
- **Rationale:** ${event.rationale}
- **Files Affected:** ${event.filesAffected?.join(', ') || 'N/A'}
- **Commits:** ${event.commitShas?.join(', ') || 'N/A'}
`).join('\n')}

## Recent Analysis Queries

${recentQueries.slice(0, 5).map((query, index) => `
### Query ${index + 1}: ${query.question}
**Answer:** ${query.answer}
**Confidence:** 95%
**Asked:** ${new Date(query.createdAt).toLocaleDateString()}
`).join('\n')}

## Export Information
- **Exported At:** ${new Date().toLocaleString()}
- **Generated By:** Codebase Time Machine v1.0
`;

    // Create and download the report
    const blob = new Blob([textReport], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${repository.name.replace(/[^a-zA-Z0-9]/g, '_')}_analysis_report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Also offer JSON download
    const jsonBlob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const jsonUrl = URL.createObjectURL(jsonBlob);
    const jsonLink = document.createElement('a');
    jsonLink.href = jsonUrl;
    jsonLink.download = `${repository.name.replace(/[^a-zA-Z0-9]/g, '_')}_analysis_data.json`;
    document.body.appendChild(jsonLink);
    jsonLink.click();
    document.body.removeChild(jsonLink);
    URL.revokeObjectURL(jsonUrl);
  };

  const getCategoryStats = () => {
    const stats = changeEvents.reduce((acc, event) => {
      acc[event.category] = (acc[event.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return [
      { name: "New Features", count: stats.new_feature || 0, color: "bg-github-success" },
      { name: "Enhancements", count: stats.enhancement || 0, color: "bg-github-blue" },
      { name: "Bug Fixes", count: stats.bug_fix || 0, color: "bg-github-error" },
      { name: "Refactoring", count: stats.refactoring || 0, color: "bg-github-warning" },
    ];
  };

  const categoryStats = getCategoryStats();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Repository Overview Header */}
        <Card className="glass-card shadow-xl mb-8 overflow-hidden">
          <CardContent className="p-8">
            <div className="flex items-start justify-between">
              <div className="flex items-start space-x-6">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <GitBranch className="text-white w-8 h-8" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-slate-800 mb-2" data-testid="text-repository-name">
                    {repository.name}
                  </h2>
                  {repository.description && (
                    <p className="text-slate-600 text-lg mb-3" data-testid="text-repository-description">
                      {repository.description}
                    </p>
                  )}
                  <div className="flex items-center space-x-6 text-sm">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-slate-700 font-medium" data-testid="text-commit-count">{repository.commitCount} commits</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-slate-700 font-medium" data-testid="text-contributor-count">{repository.contributorCount} contributors</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                      <span className="text-slate-700 font-medium" data-testid="text-analyzed-time">
                        Analyzed {repository.lastAnalyzedAt ? new Date(repository.lastAnalyzedAt).toLocaleDateString() : 'recently'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={exportReport}
                  className="bg-white/50 border-slate-200 hover:bg-white hover:shadow-lg transition-all duration-200"
                  data-testid="button-export-report"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export Report
                </Button>
                <Button 
                  size="sm" 
                  className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 shadow-lg hover:shadow-xl transition-all duration-200" 
                  data-testid="button-reanalyze"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Re-analyze
                </Button>
              </div>
          </div>
        </CardContent>
      </Card>

        <div className="grid lg:grid-cols-3 gap-8">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          <QueryInterface repositoryId={repository.id} />
          <TimelineVisualization events={changeEvents} />
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Analysis Summary */}
          <Card className="shadow-sm">
            <CardContent className="p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Analysis Summary</h3>
              
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-github-gray">Total Commits</span>
                  <span className="font-medium" data-testid="text-total-commits">{repository.commitCount}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-github-gray">Contributors</span>
                  <span className="font-medium" data-testid="text-total-contributors">{repository.contributorCount}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-github-gray">Files Analyzed</span>
                  <span className="font-medium" data-testid="text-files-analyzed">{repository.fileCount}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-github-gray">Change Events</span>
                  <span className="font-medium" data-testid="text-change-events">{changeEvents.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-github-gray">Major Features</span>
                  <span className="font-medium" data-testid="text-major-features">{repository.majorFeatureCount}</span>
                </div>
              </div>

              <div className="mt-6 pt-4 border-t border-gray-200">
                <div className="text-sm">
                  <div className="flex justify-between mb-2">
                    <span className="text-github-gray">Analysis Confidence</span>
                    <span className="font-medium text-github-success" data-testid="text-confidence-score">
                      {repository.confidenceScore}%
                    </span>
                  </div>
                  <Progress value={repository.confidenceScore} className="h-2" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Change Categories */}
          <Card className="shadow-sm">
            <CardContent className="p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Change Categories</h3>
              
              <div className="space-y-3">
                {categoryStats.map((category) => (
                  <div key={category.name} className="flex items-center justify-between" data-testid={`category-${category.name.toLowerCase().replace(' ', '-')}`}>
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 ${category.color} rounded-full`} />
                      <span className="text-sm">{category.name}</span>
                    </div>
                    <span className="text-sm font-medium">{category.count}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Recent Queries */}
          <Card className="shadow-sm">
            <CardContent className="p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Queries</h3>
              
              <div className="space-y-3">
                {recentQueries.slice(-3).reverse().map((query) => (
                  <button
                    key={query.id}
                    className="w-full text-left p-3 rounded-lg hover:bg-gray-50 border border-gray-100 transition-colors"
                    data-testid={`query-${query.id}`}
                  >
                    <div className="text-sm font-medium text-gray-900 mb-1 truncate">
                      "{query.question}"
                    </div>
                    <div className="text-xs text-github-gray">
                      {new Date(query.createdAt).toLocaleTimeString()}
                    </div>
                  </button>
                ))}
                {recentQueries.length === 0 && (
                  <p className="text-sm text-github-gray text-center py-4">
                    No queries yet. Ask your first question!
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
